# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @isAuthenticated on FIELD_DEFINITION

type Query
type Mutation

extend type Query {
  recipes(id: ID): [Recipe!]!
  recipesAuth(id: ID): [Recipe!]! @isAuthenticated
}

extend type Mutation {
  createRecipe(input: RecipeInput!): CreateRecipePayload! @isAuthenticated
}

type Recipe @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Recipe") {
  id: ID!
  title: String!
  description: String!
  ingredients: [Ingredient!]!
  instructions: [Instruction!]!
}

type Ingredient @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Ingredient") {
  label: String!
  unit: Unit!
  amount: Float!
}

type Instruction @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Instruction") {
  step: Int!
  text: String!
}

type Unit @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Unit") {
  label: String!
}



input RecipeInput @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Recipe" ){
  title: String!
  description: String!
  ingredients: [IngredientInput!]!
  instructions: [InstructionInput!]!
}

input IngredientInput @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Ingredient") {
  label: String!
  unit: UnitInput!
  amount: Float!
}

input InstructionInput @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Instruction") {
  step: Int!
  text: String!
}

input UnitInput @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.Unit") {
  label: String!
}

type CreateRecipePayload @goModel(model: "github.com/jonDufty/recipes/cookbook/rpc/cookbookpb.InsertRecipeResponse") {
  id: ID!
  errors: String!
}


